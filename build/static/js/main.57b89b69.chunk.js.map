{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","date","setState","startDate","state","isModalOpen","isInnerModalOpen","response","users","user","Date","activity_periods","userId","userName","isCalenderOpen","closeModal","bind","openModal","this","userData","id","real_name","fetch","then","res","json","data","members","console","log","catch","className","style","textAlign","color","marginTop","map","key","onClick","modalStyle","mainStyle","button","margin","width","float","marginBottom","selected","onChange","activity","calData","activityData","Component","Activity","month","year","monthNames","start_time","split","getMonth","getFullYear","getDate","end_time","display","React","Modal","outerStyle","position","top","left","height","overflow","zIndex","modal","padding","boxSizing","backgroundColor","borderRadius","boxShadow","overlay","bottom","right","children","app","border","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.57b89b69.chunk.js","sourcesContent":["import React, { Component } from 'react';\n//var ReactDOM = require('react-dom');\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n\t\t// set initial state\n\t\tthis.state = {\n\t\t\tisModalOpen: false,\n      isInnerModalOpen: false,\n      response: [],\n      users: [],\n      user: [],\n      startDate: new Date(),\n      activity_periods: [],\n      userId: \"\",\n      userName: \"\",\n      isCalenderOpen: false,\n\t\t};\n\t\t// bind functions\n\t\tthis.closeModal = this.closeModal.bind(this);\n\t\tthis.openModal = this.openModal.bind(this);\n  }\n\n   handleChange = date => {\n    this.setState({\n      startDate: date\n    });\n  };\n\n\n\t// close modal (set isModalOpen, true)\n\tcloseModal() {\n\t\tthis.setState({\n\t\t\tisModalOpen: false\n\t\t});\n\t}\n\n\t// open modal (set isModalOpen, false)\n\topenModal(userData) {\n   //alert(userData.activity_periods[0].start_time)\n\t\tthis.setState({\n      isModalOpen: true,\n      user:userData,\n      activity_periods: userData.activity_periods,\n      userId: userData.id,\n      userName: userData.real_name\n    });\n  }\n  \n  componentDidMount() {\n    fetch('http://localhost:9000/api/users/')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ response: data })\n      this.setState({ users: data.members })\n      console.log('full response===>')\n      console.log(this.state.response)\n      console.log('abstract users data only===>')\n      console.log(this.state.users)\n    })\n    .catch(console.log)\n  }\n  render() {\n    return (\n      <div className=\"container\">\n      <div className=\"col-xs-12\">\n      <h1 style={{textAlign: \"center\", color: \"green\", marginTop: 40}}>All Users</h1>\n      {this.state.users.map((user) => (\n        <div className=\"card\" key={user.id} onClick={() => this.openModal(user)}>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Name: {user.real_name}</h5>\n            <h6 className=\"card-subtitle mb-2 text-muted\">Id: {user.id}</h6>\n          </div>\n        </div>\n      ))}\n\n      <Modal\n        isModalOpen={this.state.isModalOpen}\n        closeModal={this.closeModal}\n        style={modalStyle}\n      >\n\n        <button\n          style={{\n            ...mainStyle.button,\n            margin: 0,\n            width: \"auto\",\n            marginTop: 10,\n            float: \"right\"\n          }}\n          onClick={this.closeModal}\n        >\n          Close \n        </button>\n\n        <button\n          style={{\n            ...mainStyle.button,\n            margin: 0,\n            width: \"auto\",\n            marginTop: 10,\n            float: \"left\",\n          }}\n        >\n          Check By Date \n        </button>\n\n      <div style={{marginTop:70, marginBottom: 15}}>\n        <DatePicker\n          selected={this.state.startDate}\n          onChange={this.handleChange}\n        />\n      </div>\n      \n      {this.state.activity_periods.map((activity) => (\n        <Activity  calData={this.state.startDate} activityData={activity} userId={this.state.userId} userName={this.state.userName} />\n      ))}\n        \n      </Modal>\n\n      </div>\n     </div>\n    );\n  }\n}\n\n\nclass Activity extends React.Component {\n  constructor(props) {\n\t\tsuper(props);\n      this.state = {\n        month: \"\",\n        date: \"\",\n        year: '',\n        monthNames:[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n        \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n      }\n    }\n  \n\trender() {\n    this.month=this.props.activityData.start_time.split(\" \")[0]\n    this.date=this.props.activityData.start_time.split(\" \")[1]\n    this.year=this.props.activityData.start_time.split(\" \")[2]\n  \n    if((this.state.monthNames[this.props.calData.getMonth()]==this.month) && (this.props.calData.getFullYear()== this.year)\n      && (this.props.calData.getDate()== this.date)\n      ){\n      return (\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">{this.props.userName}\n              <span style={{color: \"green\"}}> Online On </span>\n              <span>{this.props.calData.getDate()} {this.state.monthNames[this.props.calData.getMonth()]} {this.props.calData.getFullYear()}</span>\n            </h5>\n            <h5 className=\"card-title\">From: {this.props.activityData.start_time.split(\" \")[4]}</h5>\n            <h5 className=\"card-title\">To: {this.props.activityData.end_time.split(\" \")[3]}</h5>\n          </div>\n        </div>\n      );\n    } else{\n      return (\n        <div className=\"card\" style={{display: \"none\"}}>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">{this.props.userName}\n              <span style={{color: \"Red\"}}> Offline </span>\n              <span>\n              {this.props.calData.getDate()} {this.state.monthNames[this.props.calData.getMonth()]} {this.props.calData.getFullYear()}  \n              </span>\n            </h5>\n          </div>\n        </div>\n      );\n    }\n\t}\n}\n\n\n\nclass Modal extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.outerStyle = {\n\t\t\tposition: \"fixed\",\n\t\t\ttop: 0,\n\t\t\tleft: 0,\n\t\t\twidth: \"100%\",\n\t\t\theight: \"100%\",\n\t\t\toverflow: \"auto\",\n\t\t\tzIndex: 1\n\t\t};\n\n\t\t// default style\n\t\tthis.style = {\n\t\t\tmodal: {\n\t\t\t\tposition: \"relative\",\n\t\t\t\twidth: 500,\n\t\t\t\tpadding: 20,\n\t\t\t\tboxSizing: \"border-box\",\n\t\t\t\tbackgroundColor: \"#fff\",\n\t\t\t\tmargin: \"40px auto\",\n\t\t\t\tborderRadius: 3,\n\t\t\t\tzIndex: 2,\n\t\t\t\ttextAlign: \"left\",\n\t\t\t\tboxShadow: \"0 20px 30px rgba(0, 0, 0, 0.2)\",\n\t\t\t\t...this.props.style.modal\n\t\t\t},\n\t\t\toverlay: {\n\t\t\t\tposition: \"fixed\",\n\t\t\t\ttop: 0,\n\t\t\t\tbottom: 0,\n\t\t\t\tleft: 0,\n\t\t\t\tright: 0,\n\t\t\t\twidth: \"100%\",\n\t\t\t\theight: \"100%\",\n\t\t\t\tbackgroundColor: \"rgba(0,0,0,0.5)\",\n\t\t\t\t...this.props.style.overlay\n\t\t\t}\n\t\t};\n\t}\n\n\t// render modal\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\t...this.outerStyle,\n\t\t\t\t\tdisplay: this.props.isModalOpen ? \"block\" : \"none\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div style={this.style.overlay} onClick={this.props.closeModal} />\n\t\t\t\t<div onClick={this.props.closeModal} />\n\t\t\t\t<div style={this.style.modal}>{this.props.children}</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// overwrite style\nconst modalStyle = {\n\toverlay: {\n\t\tbackgroundColor: \"rgba(0, 0, 0,0.5)\"\n\t}\n};\n\nconst mainStyle = {\n\tapp: {\n\t\tmargin: \"120px 0\"\n\t},\n\tbutton: {\n\t\tbackgroundColor: \"#408cec\",\n\t\tborder: 0,\n\t\tpadding: \"12px 20px\",\n\t\tcolor: \"#fff\",\n\t\tmargin: \"0 auto\",\n\t\twidth: 150,\n\t\tdisplay: \"block\",\n\t\tborderRadius: 3\n\t}\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}